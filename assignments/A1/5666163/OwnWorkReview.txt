*** Assignment unfold ***

unfoldTree
used case instead of where clause with a next function. I think this is personal
taste so i am not deducting points for it.

iterate
return instead of Just, yields the same, return is more general.

map
used case instead of where with a next function.

balanced
used ase instead of where clause with next function.  Building the tree with an
increasing integer instead of a decreasing integer. Missing error for negative
integer case, this makes the computation loop forever.

sized
this implementation works but is less elegant than the solution version because
it carries depth and label information explicitly in a tuple which decreases
readability.

*** Assignment count ***

I split up the class in two methods, one base case method and one for adding a
number for each argument. Clearly Wouter's method is smaller and simpler in
essence.

*** Assignment Permutation tree ***

The cabal file works for me, but i have to give very strict version constraints

The idea is
1) build a rose tree that satisfies the smooth constraint
2) label this tree bottom up so so that at the root of the tree, depths of
   branches are visible.
3) prune the tree by traversing it and removing al branches that are not the
   'length of the initial list'-deep

Data type
Polymorphic rose trees, and an Init for the beginning of the tree, could have
been done in a list. No leaf constructor

paths
more cases to catch Init, Pleaf constructor, concatMap use instead of list monad
bind (equal but less readable)

prune
Prune is really difficult to read compared to the one from the solution. I don't
really know how i would explain what i did here. :(

toTree
Implementation of the toTree algorithm already removes branches that are `not
smooth`. the `heads` function could have been taken form the assignment because
it does the same, but it's much less clear.

*** Assignment proofs ***

Proofs are equal.
